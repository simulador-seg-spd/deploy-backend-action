name: 'Amazon ECS Deploy Action'
description: 'Deploy a Docker image to Amazon ECS using service name, cluster name, and commit hash.'

inputs:
  service-name:
    description: 'The name of the service being deployed. This will be used to derive ECR repository, ECS service, and task role.'
    required: true
  aws-ecs-cluster:
    description: 'The AWS ECS cluster name where the service will be deployed.'
    required: true
  aws-region:
    description: 'The AWS region where the ECS service is located.'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get short commit hash
      id: vars
      run: |
        echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Derive ECS and ECR variables
      id: derive-vars
      run: |
        echo "AWS_ECR_REPOSITORY=${{ inputs.service-name }}-${{ env.COMMIT_HASH }}" >> $GITHUB_ENV
        echo "AWS_ECS_SERVICE=${{ inputs.service-name }}" >> $GITHUB_ENV
        echo "ECS_TASK_ROLE=${{ inputs.service-name }}-task" >> $GITHUB_ENV

    - name: Read policy.json
      run: |
        if [ -f "./policy.json" ]; then
          echo "Policy file found."
        else
          echo "No policy.json found, exiting."
          exit 1
        fi

    - name: Apply policy to IAM Role
      run: |
        aws iam put-role-policy --role-name ${{ env.ECS_TASK_ROLE }} --policy-name CustomPolicy --policy-document file://policy.json
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t ${{ env.AWS_ECR_REPOSITORY }} .
        docker tag ${{ env.AWS_ECR_REPOSITORY }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPOSITORY }}:latest

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPOSITORY }}:latest

    - name: Deploy to Amazon ECS with custom role
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster: ${{ inputs.aws-ecs-cluster }}
        service: ${{ env.AWS_ECS_SERVICE }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPOSITORY }}:latest
        region: ${{ inputs.aws-region }}
        role-arn: ${{ env.ECS_TASK_ROLE }}
